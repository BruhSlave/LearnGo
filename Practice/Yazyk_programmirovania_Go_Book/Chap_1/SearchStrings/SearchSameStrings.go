package main

import (
	"bufio"
	"fmt"
	"os"
)

// Dupl выводит текст каждой строки, которая появляется в
// стандартном вводе более одного раза, а также количество
// ее появлений,
/* func main() {
	// Создаем карту для хранения строк и их количества
	counts := make(map[string]int)
	// Создаем новый сканер для чтения стандартного ввода
	input := bufio.NewScanner(os.Stdin)

	// Читаем стандартный ввод построчно
	for input.Scan() {
		// Увеличиваем счетчик для текущей строки
		counts[input.Text()]++
		// эквивалентна следующим двум инструкциям:
		// line := input.Text()
		// counts[line] = counts[line] + 1
	}
	// Примечание: игнорируем потенциальные
	// ошибки из input.Err()

	// Выводим строки, которые встречаются более одного раза, с их количеством
	for line, n := range counts {
		if n > 1 {
			fmt.Printf("%d\t%s\n", n, line)
		}
	}
} */

// Dup2 выводит текст каждой строки, которая появляется во
// входных данных более одного раза. Программа читает
// стандартный ввод или список именованных файлов,
// Главная функция программы
func main() {
	// Создаем карту для подсчета строк и их повторений
	counts := make(map[string]int)
	// Получаем аргументы командной строки, исключая имя программы
	files := os.Args[1:]

	// Если аргументы командной строки отсутствуют, считываем из стандартного ввода
	if len(files) == 0 {
		countLines(os.Stdin, counts)
	} else {
		// Иначе, для каждого файла в аргументах командной строки
		for _, arg := range files {
			// Открываем файл
			f, err := os.Open(arg)
			// Проверяем, была ли ошибка при открытии файла
			if err != nil {
				// Если ошибка, выводим сообщение об ошибке и продолжаем с следующим файлом
				fmt.Fprintf(os.Stderr, "dup2: %v\n", err)
				continue
			}
			// Считываем строки из файла и обновляем карту подсчета
			countLines(f, counts)
			// Закрываем файл после обработки
			f.Close()
		}
	}
	fmt.Print("In Files: ")
	// Выводим имя для каждого файла
	for k := 1; k < len(files)+1; k++ {
		fmt.Printf("%s", os.Args[k])
		continue
	}
	fmt.Println()
	// Выводим строки, которые встречаются более одного раза, с их количеством
	for line, n := range counts {
		if n > 1 {
			fmt.Printf("%d\t%s\n", n, line)
		}
	}
}

// Функция для подсчета строк в файле или стандартном вводе
func countLines(f *os.File, counts map[string]int) {
	// Создаем новый сканер для чтения из файла или стандартного ввода
	input := bufio.NewScanner(f)
	// Читаем строки до конца файла или стандартного ввода
	for input.Scan() {
		// Увеличиваем счетчик для текущей строки
		counts[input.Text()]++
	}
}
